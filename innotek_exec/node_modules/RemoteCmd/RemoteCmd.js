/*
Description			: use 'net' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var net = require('net');

/*
Description			: use 'Fw' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var fw = require('../Fw');

/*
Description			: use 'InnerCommunication' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var innerCommu = require('../InnerCommunication');

/*
Description			: use 'fs'.
Default value		: /
The scope of value	: /
First used			: /
*/
var fs = require('fs');

/*
Description			: InnerCommunication.js can start once the same time.
Default value		: /
The scope of value	: 0  do not start, 1 - started.
First used			: /
*/
var isStartInnerCommu = 0;

/*
Description			: use 'spawn' object.
Default value		: /
The scope of value	: /
First used			: /
*/
var spawn = require('child_process').spawn;

/*
Description			: record the current cmd type.
Default value		: /
The scope of value	: 0
First used			: /
*/
var curCmdType = 0;

/*
Description			: return a error code to server
Default value		: /
The scope of value	: /
First used			: /
*/
var errCode = 
{
	type:100,		//-- data type --//
	address:"0",	//-- middleware id --//
	data:[-1]		//-- cmd type(-1:invaild cmd, 0 < vaild cmd) --//
};

/*
Description			: the different cmd type can use different port, which connect different process.
Default value		: /
The scope of value	: /
First used			: /
*/
var INNER_PORTS = new Array(4000, 4001);

/*
Description			: server resources download path.
Default value		: /
The scope of value	:
First used			:
*/
var SER_PATH = 'ftp://cs_innotek:cs_innotek@';

/*
Description			: middleware id
Default value		: 0000000000
The scope of value	: /
First used			: /
*/
var MIDWARE_ID = "0000000000";

/***********************************************************************
**Function Name	: ProRemoteCmd
**Description	: process cmd event from server.
**Parameters	: SerPort - in.
				: SerIp - in.
				: CmdInfo - cmd information {type:?, address:?, data:[?]}
**Return		: none.
***********************************************************************/
function ProRemoteCmd(SerPort, SerIP, CmdInfo)
{
	var port = 0;
	var standardCmd;
	
	standardCmd = CmdInfo;
	
	MIDWARE_ID = CmdInfo.address;
	
	if (50 >= CmdInfo.type)	//-- 0~50 Bake_Tobacco_Monitor --//
	{
		port = INNER_PORTS[0];
	}
	
	if (4 === CmdInfo.type)	//-- update cmd --//
	{
		UpdateFw(SerPort, SerIP, standardCmd, port);
		
		return;
	}
	else if (12 === CmdInfo.type)
	{
		standardCmd = ParseCurveCmd(CmdInfo);
	}
	
	StartUpInnerCommu(SerPort, SerIP, standardCmd, port);
}

/***********************************************************************
**Function Name	: ConfigAutoMachineCurve
**Description	: configure auto machine curve.
**Parameters	: CmdInfo - in.
				: {type:x,address:x,data:[x,x...]}
**Return		: standard cmd format.
***********************************************************************/
function ParseCurveCmd(CmdInfo)
{
	var info = 
	{
		type:12,
		address:"0",
		data:[0]
	};
	var i = 0;
	var n = 0;
	var tmp = 0;


	info.type = CmdInfo.type;
	info.address = CmdInfo.address;
	info.data[n++] = CmdInfo.data[0];
	info.data[n++] = CmdInfo.data[1];
	
	for(i = 0; i < CmdInfo.data[2].DryBulbCurve.length; ++i)
	{
		info.data[n++] = CmdInfo.data[2].DryBulbCurve[i];
	}

	for(i = 0; i < CmdInfo.data[3].WetBulbCurve.length; ++i)
	{
		tmp = CmdInfo.data[3].WetBulbCurve[i] * 10;
		info.data[n++] = ((tmp >> 8) & 0x00ff);
		info.data[n++] = (tmp & 0x00ff);
	}

	for(i = 0; i < CmdInfo.data[4].TimeCurve.length; ++i)
	{
		info.data[n++] = CmdInfo.data[4].TimeCurve[i];
	}

	return info;
}

/***********************************************************************
**Function Name	: UpdateFw
**Description	: get fw from server and update.
**Parameters	: SerPort - in.
				: SerIp - in.
				: CmdInfo - cmd information {type:?, address:?, data:[?]}
				: InnerPort - in.
**Return		: none.
***********************************************************************/
function UpdateFw(SerPort, SerIP, CmdInfo, InnerPort)
{
	var date = new Date();
	var ack = 
	{
		type:4,
		address:MIDWARE_ID,			
		data:[0/*0 download failed, 1 - download ok, 2 - ver is not latest*/, 0]
	};
	var notice = 
	{
		type:4,
		address:MIDWARE_ID,
		data:[CmdInfo.data[3],CmdInfo.data[4],CmdInfo.data[2]] //-- target id,data(type) --//
	};
	var fwInfos = 
	{
		resrcPath:"-P ./fws/fw_" + CmdInfo.data[2] + " " + SER_PATH + SerIP + '/' + CmdInfo.data[2] + "." + CmdInfo.data[1] + ".fw",
		verPath:'./fws/fw_' + CmdInfo.data[2] + '/' + CmdInfo.data[2] + "." + "version",
		fwSize:CmdInfo.data[0],
		fwType:CmdInfo.data[2],
		fwVer:["",CmdInfo.data[1]], //-- old,new --//
		fwVerInfos:"",
		targetId:[CmdInfo.data[3],CmdInfo.data[4]],
		serPort:SerPort,
		serIP:SerIP,
		innerPort:InnerPort
	}

	
	//--- i am not downloading(status = 0) ---//
	if (0 === fw.GetDownloadStatus() && 0 === isStartInnerCommu)
	{	
		ack.data[1] = CmdInfo.data[2]; //-- fw type --//
		
		//--- save version information ---//
		fwInfos.fwVerInfos = CmdInfo.data[1] + "\n" + CmdInfo.data[0] + "\n" + date;
		
		fs.exists(fwInfos.verPath, function(exists){
			
			console.log(exists);
			
			if (!exists)
			{
				fs.mkdir(('./fws/fw_' + fwInfos.fwType), function(err){
		
					console.log("mkdir:",err);
					
					StartDownloadFw(fwInfos);
					
				});						
			}
			else
			{	
				var cur_ver = fs.readFileSync(fwInfos.verPath);

				if (0 !== cur_ver.length)
				{
					fwInfos.fwVer[0] = cur_ver.toString('ascii', 0, 3);
					
					if (fwInfos.fwVer[1] > fwInfos.fwVer[0])
					{
						StartDownloadFw(fwInfos);
					}
					else if (fwInfos.fwVer[1] == fwInfos.fwVer[0])	//-- the current version can use --//
					{	
						console.log("use cur fw version");
						
						ack.data[0] = 1;
						SendAckInfo(SerPort, SerIP, ack);
						StartUpInnerCommu(SerPort, SerIP, notice, InnerPort);						
					}
					else if (fwInfos.fwVer[1] < fwInfos.fwVer[0])
					{
						console.log(fwInfos.fwType + " fw ver" +"(" + fwInfos.fwVer[1] + ")" + " is old version");
						
						ack.data[0] = 2;					//-- fw ver is old version --//
						SendAckInfo(SerPort, SerIP, ack);	//-- notice server --//	
					}
				}
				else
				{
					console.log("read version infos failed!");
				}					
			}			
							
		});	//--- end of fs.exists(version_path, function(exists) ---//				
		//---------- end -----------//		
	}	
	else
	{	
		errCode.address = MIDWARE_ID;
		errCode.data[0] = curCmdType;
		
		SendAckInfo(SerPort, SerIP, errCode);
	}	
}

/***********************************************************************
**Function Name	: StartDownloadFw
**Description	: start download fw.
**Parameters	: FwInfos - in.
					{
						resrcPath:"-P ./fws/fw_" + CmdInfo.data[2] + " " + SER_PATH + CmdInfo.data[2] + "." + CmdInfo.data[1] + ".fw",
						verPath:'./fws/fw_' + CmdInfo.data[2] + '/' + CmdInfo.data[2] + "." + "version",
						fwSize:CmdInfo.data[0],
						fwType:CmdInfo.data[2],
						fwVer:["",CmdInfo.data[1]], //-- old,new --//
						fwVerInfos:"",
						targetId:[CmdInfo.data[3],CmdInfo.data[4]],
						serPort:SerPort,
						serIP:SerIP,
						innerPort:InnerPort
					}
**Return		: none.
***********************************************************************/
function StartDownloadFw(FwInfos)
{
	var ack = 
	{
		type:4,
		address:MIDWARE_ID,			
		data:[0/*0 download failed, 1 - download ok, 2 - ver is not latest*/, FwInfos.type]
	};
	
	console.log(FwInfos.resrcPath);

	fw.DownloadFw(FwInfos.resrcPath);
	
	fw.Event.once('download_end', function(){
	
		ack.data[0] = 1;
		
		fw.Event.removeAllListeners();
		SendAckInfo(FwInfos.serPort, FwInfos.serIP, ack);
		
		WriteVersionInfo(FwInfos);
	});
	
	fw.Event.once('download_error', function(err){
	
		console.log(err);
		
		fw.Event.removeAllListeners();
		SendAckInfo(FwInfos.serPort, FwInfos.serIP, ack);
		
		DelFw(FwInfos.fwType, FwInfos.fwVer[1]);
	});

	console.log("fw_size = " + FwInfos.fwSize + " Bytes");				
}

/***********************************************************************
**Function Name	: WriteVersionInfo
**Description	: we write fw version information to file.
**Parameters	: infos - in.
					{
						resrcPath:"-P ./fws/fw_" + CmdInfo.data[2] + " " + SER_PATH + CmdInfo.data[2] + "." + CmdInfo.data[1] + ".fw",
						verPath:'./fws/fw_' + CmdInfo.data[2] + '/' + CmdInfo.data[2] + "." + "version",
						fwSize:CmdInfo.data[0],
						fwType:CmdInfo.data[2],
						fwVer:["",CmdInfo.data[1]], //-- old,new --//
						fwVerInfos:"",
						targetId:[CmdInfo.data[3],CmdInfo.data[4]],
						serPort:SerPort,
						serIP:SerIP,
						innerPort:InnerPort
					}
**Return		: none.
***********************************************************************/	
function WriteVersionInfo(infos)
{
	var notice = 
	{
		type:4,
		address:MIDWARE_ID,
		data:[infos.targetId[0],infos.targetId[1],infos.fwType]
	};
	
	fs.writeFile(infos.verPath, infos.fwVerInfos, function(err){

		if (err)
		{
			console.log("save " + infos.verPath + " failesd!");
			throw err;
		}
		else
		{
			console.log("save " + infos.verPath + " ok!");
			
			DelFw(infos.fwType, infos.fwVer[0]);
			
			if (100 !== infos.fwType)
			{
				StartUpInnerCommu(infos.serPort, infos.serIP, notice, infos.innerPort);	//-- notice C process --//								
			}
			else if (100 === infos.fwType) //-- innotek_exec update --//
			{
				var reboot = spawn('reboot');
	
				reboot.once('close', function(code){
		
					console.log("reboot.....");
				});					
			}
		}						
							
	});	//--- end of fs.writeFile(version_path, version_infos, function(err) ---//
			
}

/***********************************************************************
**Function Name	: DelFw
**Description	: delete fw.
**Parameters	: type - fw type.
				: version - fw version.
**Return		: none.
***********************************************************************/
function DelFw(type, version)
{
	var file = './fws/fw_' + type + '/' + type + '.' + version + '.fw';
	var rm = spawn('rm', [file]);
	
	rm.once('close', function(code){
		
		console.log("rm " + file + ' ' + code);
	});		
}

/***********************************************************************
**Function Name	: StartUpInnerCommu
**Description	: startup inner communication.
**Parameters	: SerPort - in.
				: SerIP - in.
				: CmdInfo - cmd information {type:?, address:?, data:[?]}
				: InnerPort - in.
**Return		: none.
***********************************************************************/
function StartUpInnerCommu(SerPort, SerIP, CmdInfo, InnerPort)
{
	if (0 === isStartInnerCommu)
	{
		 var params = {CmdInfo:CmdInfo,port:InnerPort};
		
		isStartInnerCommu = 1;
		curCmdType = CmdInfo.type;
		
		innerCommu.InitInnerCommunication(params);
		
		innerCommu.Event.once('communication_error', function(){
		
			console.log("inner communication faild");
			
			innerCommu.Event.removeAllListeners();
			
			isStartInnerCommu = 0;
			curCmdType = 0;		
		});
		
		innerCommu.Event.once('communication_end', function(){
			
			console.log("inner communication ok");
			
			innerCommu.Event.removeAllListeners();
			
			isStartInnerCommu = 0;
			curCmdType = 0;	
								
			if (15 === CmdInfo.type)
			{			
				var kill_cprocess = spawn('/bin/bash', ['./node_modules/RemoteCmd/kill_cprocess', 'Bake_Tobacco_Monitor'], {stdio:'inherit'});
	
				kill_cprocess.once('close', function(code){
		
					console.log("kill Bake_Tobacco_Monitor ok! " + code);	
				});
			}		
		});
	}
	else //-- processing cmd --//
	{	
		console.log("processing remote cmd!");
		
		errCode.address = MIDWARE_ID;
		errCode.data[0] = curCmdType;
		
		SendAckInfo(SerPort, SerIP, errCode);
	}	
}

/***********************************************************************
**Function Name	: SendAckInfo
**Description	: send ack information to server.
**Parameters	: SerPort - in.
				: SerIP - in.
				: AckInfo - cmd information {type:?, address:?, data:[?]}
**Return		: none.
***********************************************************************/
function SendAckInfo(SerPort, SerIP, AckInfo)
{
	var client_socket = new net.Socket();
	
	client_socket.connect(SerPort, SerIP, function(){
		
		console.log("CONNECTED:" + SerIP + ":" + SerPort);
		
		client_socket.write(JSON.stringify(AckInfo), function(){
		
			console.log("send " + AckInfo.type + " ack info ok!");
			
			client_socket.destroy();
		});	
	});
	
	client_socket.on('error', function(err){
	
		console.log("ERROR:",err.errno);	
		
		client_socket.destroy();
	});
	
	client_socket.on('close', function(){
	
		console.log("DISCONNECTED: " + SerIP + ":" + SerPort);
		
		client_socket.removeAllListeners();
	});
}

exports.ProRemoteCmd = ProRemoteCmd;




