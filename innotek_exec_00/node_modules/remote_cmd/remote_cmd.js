/*
Description			: use 'net' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var net = require('net');

/*
Description			: use 'Fw' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var fw = require('../fw');

/*
Description			: use 'InnerCommunication' module.
Default value		: /
The scope of value	: /
First used			: /
*/
var innerCommu = require('../inner_communication');

/*
Description			: use 'fs'.
Default value		: /
The scope of value	: /
First used			: /
*/
var fs = require('fs');

/*
Description			: use 'events'.
Default value		: /
The scope of value	: /
First used			: /
*/
var events = require('events');

/*
Description			: use 'events' object.
Default value		: /
The scope of value	: /
First used			: /
*/
var event = new events.EventEmitter();

/*
Description			: InnerCommunication.js can start once the same time.
Default value		: /
The scope of value	: 0  do not start, 1 - started.
First used			: /
*/
var isProCmd = 0;

/*
Description			: use 'spawn' object.
Default value		: /
The scope of value	: /
First used			: /
*/
var spawn = require('child_process').spawn;

/*
Description			: record the current cmd type.
Default value		: /
The scope of value	: 0
First used			: /
*/
var curCmdType = 0;

/*
Description			: return a error code to server
Default value		: /
The scope of value	: /
First used			: /
*/
var errCode = 
{
	type:100,		//-- data type --//
	address:"0",	//-- middleware id --//
	data:[-1]		//-- cmd type(-1:invaild cmd, 0 < vaild cmd) --//
};

/*
Description			: the different cmd type can use different port, which connect different process.
Default value		: /
The scope of value	: /
First used			: /
*/
var INNER_PORTS = new Array(4000, 4001);

/*
Description			: server resources download path.
Default value		: /
The scope of value	:
First used			:
*/
var SER_PATH = 'ftp://cs_innotek:cs_innotek@';

/*
Description			: middleware id
Default value		: 0000000000
The scope of value	: /
First used			: /
*/
var MIDWARE_ID = "0000000000";

/***********************************************************************
**Function Name	: proRemoteCmd
**Description	: process cmd event from server.
**Parameters	: serPort {Number} - in.
				: SerIp {String} - in.
				: cmdInfos {Array} - cmd information [{type:?, address:?, data:[?]}]
**Return		: none.
***********************************************************************/
function proRemoteCmd(serPort, serIP, cmdInfos)
{
	var cmdSum = 0;
	
	if (0 === isProCmd)
	{
		isProCmd = 1;
		
		cmdSum = cmdInfos.length;
		
		event.on('pro_cmd', function(cmdInfo){
		
			var port = 0;
	
			MIDWARE_ID = cmdInfo.address;
	
			if (50 >= cmdInfo.type)	//-- 0~50 for Bake_Tobacco_Monitor --//
			{
				port = INNER_PORTS[0];
			}
	
			if (4 === cmdInfo.type)	//-- update cmd --//
			{
				var myFwCmd = {
					type: cmdInfo.type,
					address:cmdInfo.address,
					data:[]
				};
				var tmp = 0;

				//--- fw size ---//
				tmp = (cmdInfo.data[2] << 24);
				tmp |= (cmdInfo.data[3] << 16);
				tmp |= (cmdInfo.data[4] << 8);
				tmp |= cmdInfo.data[5];
				myFwCmd.data.push(tmp);

				//--- fw version ---//
				tmp = 0;
				tmp = (cmdInfo.data[6] << 8);
				tmp |= (cmdInfo.data[7]);

				tmp = "000" + tmp;
				tmp = tmp.substring((tmp.length - 3));
				myFwCmd.data.push(tmp);

				myFwCmd.data.push(cmdInfo.data[8]);	//-- fw type --//
				myFwCmd.data.push(cmdInfo.data[0]);	//-- target id --//
				myFwCmd.data.push(cmdInfo.data[1]);

				updateFw(serPort, serIP, myFwCmd, port);
		
				return;
			}
	
			startUpInnerCommu(serPort, serIP, cmdInfo, port);		
		});
		
		event.on('pro_cmd_end', function(){
		
			cmdSum--;
			
			if (0 === cmdSum)
			{
				isProCmd = 0;
				curCmdType = 0;
				
				event.removeAllListeners();
				
				console.log("all remote cmds process ok!");
			}
			else
			{
				curCmdType = cmdInfos[(cmdInfos.length - cmdSum)].type;
				event.emit('pro_cmd', cmdInfos[(cmdInfos.length - cmdSum)]);
			}
		});
		
		curCmdType = cmdInfos[(cmdInfos.length - cmdSum)].type;
		
		event.emit('pro_cmd', cmdInfos[(cmdInfos.length - cmdSum)]);
	}
	else //-- processing cmd --//
	{	
		console.log("processing remote cmd!");
		
		errCode.address = MIDWARE_ID;
		errCode.data[0] = curCmdType;
		
		sendFeedbackInfo(serPort, serIP, errCode);
	}	
}

/***********************************************************************
**Function Name	: updateFw
**Description	: get fw from server and update.
**Parameters	: serPort {Number} - in.
				: SerIp {String} - in.
				: cmdInfo {Json} - cmd information {type:?, address:?, data:[?]}
				: innerPort {Number} - in.
**Return		: none.
***********************************************************************/
function updateFw(serPort, serIP, cmdInfo, innerPort)
{
	var date = new Date();
	var ack = 
	{
		type:4,
		address:MIDWARE_ID,			
		data:[0/*0 download failed, 1 - download ok, 2 - ver is not latest*/]
	};
	var notice = 
	{
		type:4,
		address:MIDWARE_ID,
		data:[cmdInfo.data[3],cmdInfo.data[4],cmdInfo.data[2]] //-- target id,data(type) --//
	};
	var fwInfos = 
	{
		resrcPath:"-P ./fws/fw_" + cmdInfo.data[2] + " " + SER_PATH + serIP + '/' + cmdInfo.data[2] + "." + cmdInfo.data[1] + ".fw",
		verPath:'./fws/fw_' + cmdInfo.data[2] + '/' + cmdInfo.data[2] + "." + "version",
		fwSize:cmdInfo.data[0],
		fwType:cmdInfo.data[2],
		fwVer:["",cmdInfo.data[1]], //-- old,new --//
		fwVerInfos:"",
		targetId:[cmdInfo.data[3],cmdInfo.data[4]],
		serPort:serPort,
		serIP:serIP,
		innerPort:innerPort
	};
	
	//--- i am not downloading(status = 0) ---//
	if (0 === fw.getDownloadStatus())
	{	

		//--- save version information ---//
		fwInfos.fwVerInfos = cmdInfo.data[1] + "\n" + cmdInfo.data[0] + "\n" + date;
		
		fs.exists(fwInfos.verPath, function(exists){
			
			console.log(exists);
			
			if (!exists)
			{
				fs.mkdir(('./fws/fw_' + fwInfos.fwType), function(err){
		
					console.log("mkdir:",err);
					
					startDownloadFw(fwInfos);
					
				});						
			}
			else
			{	
				var curVer = fs.readFileSync(fwInfos.verPath);

				if (0 !== curVer.length)
				{
					fwInfos.fwVer[0] = curVer.toString('ascii', 0, 3);
					
					if (fwInfos.fwVer[1] > fwInfos.fwVer[0])
					{
						startDownloadFw(fwInfos);
					}
					else if (fwInfos.fwVer[1] == fwInfos.fwVer[0])	//-- the current version can use --//
					{	
						console.log("use cur fw version");
						
						ack.data[0] = 1;
						sendFeedbackInfo(serPort, serIP, ack);
						startUpInnerCommu(serPort, serIP, notice, innerPort);						
					}
					else if (fwInfos.fwVer[1] < fwInfos.fwVer[0])
					{
						console.log(fwInfos.fwType + " fw ver" +"(" + fwInfos.fwVer[1] + ")" + " is old version");
						
						ack.data[0] = 2;					//-- fw ver is old version --//
						sendFeedbackInfo(serPort, serIP, ack);	//-- notice server --//	
						event.emit('pro_cmd_end');
					}
				}
				else
				{
					console.log("read version infos failed!");
					
					event.emit('pro_cmd_end');
				}					
			}			
							
		});	//--- end of fs.exists(version_path, function(exists) ---//				
		//---------- end -----------//		
	}
	else
	{
		event.emit('pro_cmd_end');
	}	
}

/***********************************************************************
**Function Name	: startDownloadFw
**Description	: start download fw.
**Parameters	: fwInfos - in.
					{
						resrcPath:"-P ./fws/fw_" + cmdInfo.data[2] + " " + SER_PATH + cmdInfo.data[2] + "." + cmdInfo.data[1] + ".fw",
						verPath:'./fws/fw_' + cmdInfo.data[2] + '/' + cmdInfo.data[2] + "." + "version",
						fwSize:cmdInfo.data[0],
						fwType:cmdInfo.data[2],
						fwVer:["",cmdInfo.data[1]], //-- old,new --//
						fwVerInfos:"",
						targetId:[cmdInfo.data[3],cmdInfo.data[4]],
						serPort:serPort,
						serIP:serIP,
						innerPort:innerPort
					}
**Return		: none.
***********************************************************************/
function startDownloadFw(fwInfos)
{
	var ack = 
	{
		type:4,
		address:MIDWARE_ID,			
		data:[0/*0 download failed, 1 - download ok, 2 - ver is not latest*/]
	};
	
	console.log(fwInfos.resrcPath);

	fw.downloadFw(fwInfos.resrcPath);
	
	fw.Event.once('download_end', function(){
	
		ack.data[0] = 1;
		
		fw.Event.removeAllListeners();
		sendFeedbackInfo(fwInfos.serPort, fwInfos.serIP, ack);		
		writeVersionInfo(fwInfos);
	});
	
	fw.Event.once('download_error', function(err){
	
		console.log(err);
		
		fw.Event.removeAllListeners();
		sendFeedbackInfo(fwInfos.serPort, fwInfos.serIP, ack);		
		delFw(fwInfos.fwType, fwInfos.fwVer[1]);
		event.emit('pro_cmd_end');
	});

	console.log("fw_size = " + fwInfos.fwSize + " Bytes");				
}

/***********************************************************************
**Function Name	: writeVersionInfo
**Description	: we write fw version information to file.
**Parameters	: infos - in.
					{
						resrcPath:"-P ./fws/fw_" + cmdInfo.data[2] + " " + SER_PATH + cmdInfo.data[2] + "." + cmdInfo.data[1] + ".fw",
						verPath:'./fws/fw_' + cmdInfo.data[2] + '/' + cmdInfo.data[2] + "." + "version",
						fwSize:cmdInfo.data[0],
						fwType:cmdInfo.data[2],
						fwVer:["",cmdInfo.data[1]], //-- old,new --//
						fwVerInfos:"",
						targetId:[cmdInfo.data[3],cmdInfo.data[4]],
						serPort:serPort,
						serIP:serIP,
						innerPort:innerPort
					}
**Return		: none.
***********************************************************************/	
function writeVersionInfo(infos)
{
	var notice = 
	{
		type:4,
		address:MIDWARE_ID,
		data:[infos.targetId[0],infos.targetId[1],infos.fwType]
	};
	
	fs.writeFile(infos.verPath, infos.fwVerInfos, function(err){

		if (err)
		{
			console.log("save " + infos.verPath + " failesd!");
			
			event.emit('pro_cmd_end');
			
			throw err;
		}
		else
		{
			console.log("save " + infos.verPath + " ok!");
			
			delFw(infos.fwType, infos.fwVer[0]);
			
			if (100 !== infos.fwType)
			{
				startUpInnerCommu(infos.serPort, infos.serIP, notice, infos.innerPort);	//-- notice C process --//								
			}
			else if (100 === infos.fwType) //-- innotek_exec update --//
			{
				sendFeedbackInfo(infos.serPort, infos.serIP, {type:4,address:MIDWARE_ID,data:[1]});	
				
				event.on('write_socket_ok', function(){
				
					var reboot = spawn('reboot');

					reboot.once('close', function(code){
	
						console.log("reboot.....");
					});							
				});			
			}
		}						
							
	});	//--- end of fs.writeFile(version_path, version_infos, function(err) ---//
			
}

/***********************************************************************
**Function Name	: delFw
**Description	: delete fw.
**Parameters	: type {Number} - fw type.
				: version {String} - fw version.
**Return		: none.
***********************************************************************/
function delFw(type, version)
{
	var file = './fws/fw_' + type + '/' + type + '.' + version + '.fw';
	var rm = spawn('rm', [file]);
	
	rm.once('close', function(code){
		
		console.log("rm " + file + ' ' + code);
	});		
}

/***********************************************************************
**Function Name	: startUpInnerCommu
**Description	: startup inner communication.
**Parameters	: serPort {Number} - in.
				: serIP {String} - in.
				: cmdInfo {Json} - cmd information {type:?, address:?, data:[?]}
				: innerPort {Json} - in.
**Return		: none.
***********************************************************************/
function startUpInnerCommu(serPort, serIP, cmdInfo, innerPort)
{
	var params = {cmdInfo:cmdInfo,port:innerPort};
		
	innerCommu.initInnerCommunication(params);
	
	innerCommu.Event.once('communication_error', function(){
	
		console.log("inner communication faild");
		
		innerCommu.Event.removeAllListeners();
		
		event.emit('pro_cmd_end');	
	});
	
	innerCommu.Event.once('communication_end', function(){
		
		console.log("inner communication ok");
		
		innerCommu.Event.removeAllListeners();
		
		event.emit('pro_cmd_end');			
	});

}

/***********************************************************************
**Function Name	: sendFeedbackInfo
**Description	: send ack information to server.
**Parameters	: serPort {Number} - in.
				: serIP {String} - in.
				: resInfo {Json} - cmd information {type:?, address:?, data:[?]}
**Return		: none.
***********************************************************************/
function sendFeedbackInfo(serPort, serIP, resInfo)
{
	var clientSocket = new net.Socket();
	
	clientSocket.connect(serPort, serIP, function(){
		
		console.log("CONNECTED:" + serIP + ":" + serPort);
		
		clientSocket.write(JSON.stringify(resInfo), function(){
		
			console.log("send " + resInfo.type + " ack info ok!");
			
			event.emit('write_socket_ok');
			
			clientSocket.destroy();
		});	
	});
	
	clientSocket.on('error', function(err){
	
		console.log("ERROR:",err.errno);	
		
		clientSocket.destroy();
	});
	
	clientSocket.on('close', function(){
	
		console.log("DISCONNECTED: " + serIP + ":" + serPort);
		
		clientSocket.removeAllListeners();
	});
}

exports.proRemoteCmd = proRemoteCmd;




